{"version":3,"sources":["store/store.js","reducers/fetchItems.js","components/Box.tsx","components/single/Card.tsx","components/card-grid/CardGrid.tsx","components/Home.tsx","App.tsx","actions/fetchItems.js","serviceWorker.ts","index.tsx"],"names":["store","createStore","state","action","type","id","item","name","details","imageUrl","presentationLink","codeLink","filter","itemId","BoxWrapper","styled","div","Box","props","boxClassNames","classnames","className","to","CardWrapper","Card","cardClassNames","CardGridWrapper","CARD_NUMBERS","CardGrid","cardGridClassNames","Grid","container","spacing","map","card","index","xs","sm","HomeWrapper","Home","console","info","getState","dispatch","addItem","App","src","alt","path","exact","component","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAGaA,EAAQC,YCHE,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAC7C,OAAOA,EAAOC,MACZ,IAAK,WACH,MAAM,GAAN,mBACKF,GADL,CAEE,CACEG,GAAIF,EAAOG,KAAKD,GAChBE,KAAMJ,EAAOG,KAAKC,KAClBC,QAASL,EAAOG,KAAKE,QACrBC,SAAUN,EAAOG,KAAKG,SACtBC,iBAAkBP,EAAOG,KAAKI,iBAC9BC,SAAUR,EAAOG,KAAKK,YAI5B,IAAK,oBACH,OAAO,YAAIT,EAAMU,OAAO,SAAAN,GAAI,OAAIA,EAAKH,SAAWA,EAAOU,UAEzD,QACE,OAAOX,K,kJCTb,IAAMY,EAAaC,IAAOC,IAAV,KAIHC,EAAsB,SAACC,GAClC,IAAMC,EAAgBC,IAAWF,EAAMG,UAAW,UAElD,OACE,gBAACP,EAAD,CAAYO,UAAaF,GACvB,kCAEA,gBAAC,IAAD,CAAMG,GAAG,KAAT,U,sKCXN,IAAMC,EAAcR,IAAOC,IAAV,KAOJQ,EAAwB,SAACN,GACpC,IAAMO,EAAiBL,IAAWF,EAAMG,UAAW,WAEnD,OACE,gBAACE,EAAD,CAAaF,UAAaI,GACxB,qC,iFCXN,IAAMC,EAAkBX,IAAOC,IAAV,KAIfW,EAAe,CAAC,IAAK,IAAK,IAAK,KAExBC,EAAgC,SAACV,GAC5C,IAAMW,EAAqBT,IAAWF,EAAMG,UAAW,gBAEvD,OACE,gBAACK,EAAD,CAAiBL,UAAaQ,GAC5B,gBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAErBL,EAAaM,IAAI,SAACC,EAAMC,GAAP,OACb,gBAACL,EAAA,EAAD,CAAMxB,MAAI,EAAC8B,GAAI,EAAGC,GAAI,GACpB,gBAAC,EAAD,Y,mGCdhB,IAAMC,EAAcvB,IAAOC,IAAV,KAIJuB,EAAwB,SAACrB,GACpC,IAAMC,EAAgBC,IAAWF,EAAMG,UAAW,UAElD,OACE,gBAACiB,EAAD,CAAajB,UAAaF,GACxB,0BACE,0BACE,gBAAC,IAAD,CAAMG,GAAG,KAAT,SAEF,0BACE,gBAAC,IAAD,CAAMA,GAAG,SAAT,SAGJ,gBAAC,EAAD,QCZNkB,QAAQC,KAAK,gBAAiBzC,EAAM0C,YAEpC1C,EAAM2C,SCnBiB,SAAArC,GAAI,MAAK,CAC9BF,KAAM,WACNE,QDiBasC,CAXF,CACXvC,GAAI,EACJE,KAAM,oBACNC,QAAS,oBACTC,SAAU,qBACVC,iBAAkB,qBAClBC,SAAU,wBAOZ6B,QAAQC,KAAK,iBAAkBzC,EAAM0C,YAErC1C,EAAM2C,SClBmC,CACvCvC,KAAM,oBACNS,ODgB4B,IAE9B2B,QAAQC,KAAK,qBAAsBzC,EAAM0C,YAGzC,IAWeG,EAXO,WACpB,OACE,yBAAKxB,UAAU,OACb,yBAAKyB,IAAI,oBAAoBC,IAAI,QAEjC,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWX,IACjC,kBAAC,IAAD,CAAOS,KAAK,OAAOG,OAAQ,SAACjC,GAAD,OAAW,kBAAC,EAAD,CAAKG,UAAU,mBEtBvC+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASN,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEAO,SAASC,eAAe,SD8HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.be1d727c.chunk.js","sourcesContent":["import { createStore } from 'redux';\nimport { addItem } from '../reducers/fetchItems';\n\nexport const store = createStore(addItem);\n","export const addItem = (state = [], action) => {\n  switch(action.type) {\n    case 'ADD_ITEM': \n      return [\n        ...state,\n        {\n          id: action.item.id,\n          name: action.item.name,\n          details: action.item.details,\n          imageUrl: action.item.imageUrl,\n          presentationLink: action.item.presentationLink,\n          codeLink: action.item.codeLink\n        }\n      ]\n\n    case 'REMOVE_ITEM_BY_ID':\n      return [...state.filter(item => item.action === action.itemId)];\n\n    default:\n      return state;\n  }\n}\n\n","import * as React from 'react';\n// import classnames from 'classnames';\nimport { default as classnames } from 'classnames';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport interface IBox {\n  className?: string;\n}\n\nconst BoxWrapper = styled.div`\n  border: 1px black solid;\n`;\n\nexport const Box: React.FC<IBox> = (props: IBox) => {\n  const boxClassNames = classnames(props.className, 'js-box');\n  \n  return (\n    <BoxWrapper className = {boxClassNames}>\n      <div>Box</div>\n\n      <Link to='/'>Home</Link>\n    </BoxWrapper>\n  );\n}","import * as React from 'react';\n// import classnames from 'classnames';\nimport { default as classnames } from 'classnames';\nimport styled from 'styled-components';\n// import { Link } from 'react-router-dom';\n\nexport interface ICard {\n  className?: string;\n}\n\nconst CardWrapper = styled.div`\n  border: 1px black solid;\n  background-color: light-grey;\n  height: 500px;\n  width: 100%;\n`;\n\nexport const Card: React.FC<ICard> = (props: ICard) => {\n  const cardClassNames = classnames(props.className, 'js-card');\n  \n  return (\n    <CardWrapper className = {cardClassNames}>\n      <div>Card</div>\n    </CardWrapper>\n  );\n}","import * as React from 'react';\n// import classnames from 'classnames';\nimport { default as classnames } from 'classnames';\nimport styled from 'styled-components';\nimport { Card } from '../single/Card';\nimport Grid from '@material-ui/core/Grid';\n\nexport interface ICardGrid {\n  className?: string;\n}\n\nconst CardGridWrapper = styled.div`\n\n`;\n\nconst CARD_NUMBERS = ['1', '2', '3', '4'];\n\nexport const CardGrid: React.FC<ICardGrid> = (props: ICardGrid) => {\n  const cardGridClassNames = classnames(props.className, 'js-card-grid');\n  \n  return (\n    <CardGridWrapper className = {cardGridClassNames}>\n      <Grid container spacing={1}>\n        {\n          CARD_NUMBERS.map((card, index) => (\n              <Grid item xs={3} sm={6}>\n                <Card />\n              </Grid>\n          ))\n        }\n      </Grid>\n    </CardGridWrapper>\n  );\n}","import * as React from 'react';\n// import classnames from 'classnames';\nimport { default as classnames } from 'classnames';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport { CardGrid } from './card-grid/CardGrid';\n\nexport interface IHome {\n  className?: string;\n}\n\nconst HomeWrapper = styled.div`\n  border: 1px black solid;\n`;\n\nexport const Home: React.FC<IHome> = (props: IHome) => {\n  const boxClassNames = classnames(props.className, 'js-box');\n  \n  return (\n    <HomeWrapper className = {boxClassNames}>\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/box/\">Box</Link>\n        </li>\n      </ul>\n      <CardGrid />\n    </HomeWrapper>\n  );\n}","import React from \"react\";\nimport \"./App.css\";\nimport { store } from \"./store/store\";\nimport { addItem, removeItemById } from \"./actions/fetchItems\";\nimport { Route, Link } from 'react-router-dom';\nimport { Box } from './components/Box';\nimport { Home } from './components/Home';\n \nconst item = {\n  id: 1,\n  name: \"Presentation Site\",\n  details: \"Presentation site\",\n  imageUrl: \"https://google.com\",\n  presentationLink: \"https://google.com\",\n  codeLink: \"https://google.com\"\n};\n\nconsole.info('initial store', store.getState());\n\nstore.dispatch(addItem(item));\n\nconsole.info('added in store', store.getState());\n\nstore.dispatch(removeItemById(1));\n\nconsole.info('removed from store', store.getState());\n\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <img src=\"icon-menu-alt.svg\" alt=\"svg\" />\n\n      <Route path='/' exact component={Home} />\n      <Route path='/box' render={(props) => <Box className=\"new-class\" />} />\n    </div>\n  );\n};\n\nexport default App;\n","export const addItem = item => ({\n  type: 'ADD_ITEM',\n  item\n})\n\nexport const removeItemById = itemId => ({\n  type: 'REMOVE_ITEM_BY_ID',\n  itemId\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>  \n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}